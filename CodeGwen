// Les variables globales
#define NB_SAMPLE 4
// Initialisation capteurs IR. Définit la broche analogique à laquelle le capteur est connecté
const int sensorPin1 = A0; 
const int sensorPin2 = A1; 
const int sensorPin3 = A2; 

/////

float distance,distance_droite,distance_gauche; 

float etalon_sharp(float value){

  return -3.5241e-06 * pow(value, 3) + 0.0036398 * pow(value, 2) -  1.2264 * value + 153.18;

}

float MEAN_Distance(int nb_sample, int analogpin){

  float somme = 0;
  
  for (int i = 0 ; i < nb_sample ; i++){   
    
    /* 
      Lit la valeur de tension des capteurs,
      convertit cette valeur en distance et l'ajoute à une variable
    */
    somme += etalon_sharp(analogRead(sensorPin1)); 
  }
  return somme/nb_sample;   // ajouter la valeur à la somme totale
}

void setup() {
  //Construction de l'essieu
  essieu.move(0,0); 
  Serial.begin(9600); 
  delay(500);
}


void loop() {
  float tab[NB_SAMPLE];
  int dm;
  // recupere distance du capteur centrale
  float distance = MEAN_Distance(NB_SAMPLE,sensorPin2); 
  Serial.println(distance);
  delay(50);
    if ((distance<10) and (distance>0)){ // le capteur détecte un obstacle
      // A MODIFIER SELON LA VRAIE SYNTAXE DE TON CODE.
      essieu.move(X,V); // le robot s'arrete
      delay(500);
      essieu.move(-10,V); // le robot recule
      delay(500); 
      essieu.move(X,V); // le robot s'arrete     
}
// calculer la distance entre le capteur et un obstacle s'il existe
distance_droite = MEAN_Distance(NB_SAMPLE, sensorPin1); 
delay(500);
distance_gauche = MEAN_Distance(NB_SAMPLE,sensorPin3);
delay(500);

 if (distance_droite < distance_gauche){
   essieu.rotate(-90,45); // faire tourner le robot à gauche
   delay(1000);  
   } 
  else {
   essieu.rotate(90,45); // faire tourner le robot à droite
   delay(1000);
  } 
  else if (distance>0) {
    essieu.move(X,V) // faire avancer le robot
  }
}
